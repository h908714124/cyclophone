package com.github.cyclophone;

import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import static com.github.cyclophone.Permutation.cycle;
import static com.github.cyclophone.TestUtil.PERMUTATION_COMPARATOR;

enum Coset {

  COSET1(Arrays.asList(cycle(3, 4).compose(cycle(5, 6)),
      cycle(3, 5, 4, 6),
      cycle(3, 6, 4, 5),
      cycle(2, 3).compose(cycle(4, 6)),
      cycle(2, 3, 4, 5),
      cycle(2, 3, 5, 6),
      cycle(2, 3, 6, 5, 4),
      cycle(2, 4, 5, 6, 3),
      cycle(2, 4, 6, 5),
      cycle(2, 4).compose(cycle(3, 5)),
      cycle(2, 4, 3, 6),
      cycle(2, 5, 4, 3),
      cycle(2, 5, 6, 4),
      cycle(2, 5, 3, 4, 6),
      cycle(2, 5).compose(cycle(3, 6)),
      cycle(2, 6, 5, 3),
      cycle(2, 6).compose(cycle(4, 5)),
      cycle(2, 6, 3, 4),
      cycle(2, 6, 4, 3, 5),
      cycle(1, 2).compose(cycle(5, 6)),
      cycle(1, 2).compose(cycle(3, 4)),
      cycle(1, 2).compose(cycle(3, 5)).compose(cycle(4, 6)),
      cycle(1, 2).compose(cycle(3, 6)).compose(cycle(4, 5)),
      cycle(1, 2, 3).compose(cycle(4, 5, 6)),
      cycle(1, 2, 3, 4, 6, 5),
      cycle(1, 2, 3, 5, 4),
      cycle(1, 2, 3, 6),
      cycle(1, 2, 4, 6, 3),
      cycle(1, 2, 4, 5),
      cycle(1, 2, 4, 3, 5, 6),
      cycle(1, 2, 4).compose(cycle(3, 6, 5)),
      cycle(1, 2, 5, 3),
      cycle(1, 2, 5, 4, 6),
      cycle(1, 2, 5, 6, 3, 4),
      cycle(1, 2, 5).compose(cycle(3, 6, 4)),
      cycle(1, 2, 6, 5, 4, 3),
      cycle(1, 2, 6, 4),
      cycle(1, 2, 6).compose(cycle(3, 4, 5)),
      cycle(1, 2, 6, 3, 5),
      cycle(1, 3, 2).compose(cycle(4, 6, 5)),
      cycle(1, 3, 4, 5, 6, 2),
      cycle(1, 3, 5, 2),
      cycle(1, 3, 6, 4, 2),
      cycle(1, 3).compose(cycle(4, 5)),
      cycle(1, 3, 4, 6),
      cycle(1, 3, 5, 6, 4),
      cycle(1, 3, 6, 5),
      cycle(1, 3).compose(cycle(2, 4)).compose(cycle(5, 6)),
      cycle(1, 3, 2, 4),
      cycle(1, 3, 5).compose(cycle(2, 4, 6)),
      cycle(1, 3, 6).compose(cycle(2, 4, 5)),
      cycle(1, 3).compose(cycle(2, 5)).compose(cycle(4, 6)),
      cycle(1, 3, 2, 5, 6),
      cycle(1, 3, 4, 2, 5),
      cycle(1, 3, 6, 2, 5, 4),
      cycle(1, 3).compose(cycle(2, 6)),
      cycle(1, 3, 2, 6, 4, 5),
      cycle(1, 3, 4).compose(cycle(2, 6, 5)),
      cycle(1, 3, 5, 4, 2, 6),
      cycle(1, 4, 5, 3, 2),
      cycle(1, 4, 6, 2),
      cycle(1, 4, 2).compose(cycle(3, 5, 6)),
      cycle(1, 4, 3, 6, 5, 2),
      cycle(1, 4, 6, 5, 3),
      cycle(1, 4, 5, 6),
      cycle(1, 4, 3, 5),
      cycle(1, 4).compose(cycle(3, 6)),
      cycle(1, 4, 2, 3),
      cycle(1, 4).compose(cycle(2, 3)).compose(cycle(5, 6)),
      cycle(1, 4, 6).compose(cycle(2, 3, 5)),
      cycle(1, 4, 5).compose(cycle(2, 3, 6)),
      cycle(1, 4, 3).compose(cycle(2, 5, 6)),
      cycle(1, 4, 6, 3, 2, 5),
      cycle(1, 4).compose(cycle(2, 5)),
      cycle(1, 4, 2, 5, 3, 6),
      cycle(1, 4, 5, 2, 6, 3),
      cycle(1, 4, 3, 2, 6),
      cycle(1, 4, 2, 6, 5),
      cycle(1, 4).compose(cycle(2, 6)).compose(cycle(3, 5)),
      cycle(1, 5, 6, 4, 3, 2),
      cycle(1, 5, 4, 2),
      cycle(1, 5, 2).compose(cycle(3, 4, 6)),
      cycle(1, 5, 3, 6, 2),
      cycle(1, 5, 6, 3),
      cycle(1, 5).compose(cycle(4, 6)),
      cycle(1, 5, 3, 4),
      cycle(1, 5, 4, 3, 6),
      cycle(1, 5, 4, 6, 2, 3),
      cycle(1, 5).compose(cycle(2, 3)),
      cycle(1, 5, 6).compose(cycle(2, 3, 4)),
      cycle(1, 5, 2, 3, 6, 4),
      cycle(1, 5, 2, 4, 3),
      cycle(1, 5, 3, 2, 4, 6),
      cycle(1, 5, 6, 2, 4),
      cycle(1, 5).compose(cycle(2, 4)).compose(cycle(3, 6)),
      cycle(1, 5, 3).compose(cycle(2, 6, 4)),
      cycle(1, 5, 4).compose(cycle(2, 6, 3)),
      cycle(1, 5, 2, 6),
      cycle(1, 5).compose(cycle(2, 6)).compose(cycle(3, 4)),
      cycle(1, 6, 3, 2),
      cycle(1, 6, 4, 5, 2),
      cycle(1, 6, 5, 3, 4, 2),
      cycle(1, 6, 2).compose(cycle(3, 5, 4)),
      cycle(1, 6, 4, 3),
      cycle(1, 6, 5, 4),
      cycle(1, 6, 3, 4, 5),
      cycle(1, 6).compose(cycle(3, 5)),
      cycle(1, 6, 5, 2, 3),
      cycle(1, 6).compose(cycle(2, 3)).compose(cycle(4, 5)),
      cycle(1, 6, 2, 3, 4),
      cycle(1, 6, 4, 2, 3, 5),
      cycle(1, 6, 2, 4, 5, 3),
      cycle(1, 6, 5).compose(cycle(2, 4, 3)),
      cycle(1, 6).compose(cycle(2, 4)),
      cycle(1, 6, 3, 5, 2, 4),
      cycle(1, 6, 3).compose(cycle(2, 5, 4)),
      cycle(1, 6, 4).compose(cycle(2, 5, 3)),
      cycle(1, 6, 2, 5),
      cycle(1, 6).compose(cycle(2, 5)).compose(cycle(3, 4)),
      Permutation.identity())),


  COSET2(Arrays.asList(cycle(5, 6),
      cycle(3, 4),
      cycle(3, 5).compose(cycle(4, 6)),
      cycle(3, 6).compose(cycle(4, 5)),
      cycle(2, 3).compose(cycle(4, 5, 6)),
      cycle(2, 3, 4, 6, 5),
      cycle(2, 3, 5, 4),
      cycle(2, 3, 6),
      cycle(2, 4, 6, 3),
      cycle(2, 4, 5),
      cycle(2, 4, 3, 5, 6),
      cycle(2, 4).compose(cycle(3, 6, 5)),
      cycle(2, 5, 3),
      cycle(2, 5, 4, 6),
      cycle(2, 5, 6, 3, 4),
      cycle(2, 5).compose(cycle(3, 6, 4)),
      cycle(2, 6, 5, 4, 3),
      cycle(2, 6, 4),
      cycle(2, 6).compose(cycle(3, 4, 5)),
      cycle(2, 6, 3, 5),
      cycle(1, 2).compose(cycle(3, 4)).compose(cycle(5, 6)),
      cycle(1, 2).compose(cycle(3, 5, 4, 6)),
      cycle(1, 2).compose(cycle(3, 6, 4, 5)),
      cycle(1, 2),
      cycle(1, 2, 3).compose(cycle(4, 6)),
      cycle(1, 2, 3, 4, 5),
      cycle(1, 2, 3, 5, 6),
      cycle(1, 2, 3, 6, 5, 4),
      cycle(1, 2, 4, 5, 6, 3),
      cycle(1, 2, 4, 6, 5),
      cycle(1, 2, 4).compose(cycle(3, 5)),
      cycle(1, 2, 4, 3, 6),
      cycle(1, 2, 5, 4, 3),
      cycle(1, 2, 5, 6, 4),
      cycle(1, 2, 5, 3, 4, 6),
      cycle(1, 2, 5).compose(cycle(3, 6)),
      cycle(1, 2, 6, 5, 3),
      cycle(1, 2, 6).compose(cycle(4, 5)),
      cycle(1, 2, 6, 3, 4),
      cycle(1, 2, 6, 4, 3, 5),
      cycle(1, 3, 2).compose(cycle(4, 5)),
      cycle(1, 3, 4, 6, 2),
      cycle(1, 3, 5, 6, 4, 2),
      cycle(1, 3, 6, 5, 2),
      cycle(1, 3).compose(cycle(4, 6, 5)),
      cycle(1, 3, 4, 5, 6),
      cycle(1, 3, 5),
      cycle(1, 3, 6, 4),
      cycle(1, 3).compose(cycle(2, 4)),
      cycle(1, 3, 2, 4).compose(cycle(5, 6)),
      cycle(1, 3, 5, 2, 4, 6),
      cycle(1, 3, 6, 2, 4, 5),
      cycle(1, 3).compose(cycle(2, 5, 6)),
      cycle(1, 3, 2, 5).compose(cycle(4, 6)),
      cycle(1, 3, 4).compose(cycle(2, 5)),
      cycle(1, 3, 6).compose(cycle(2, 5, 4)),
      cycle(1, 3).compose(cycle(2, 6, 4, 5)),
      cycle(1, 3, 2, 6),
      cycle(1, 3, 4, 2, 6, 5),
      cycle(1, 3, 5, 4).compose(cycle(2, 6)),
      cycle(1, 4, 6, 5, 3, 2),
      cycle(1, 4, 5, 6, 2),
      cycle(1, 4, 3, 5, 2),
      cycle(1, 4, 2).compose(cycle(3, 6)),
      cycle(1, 4, 5, 3),
      cycle(1, 4, 6),
      cycle(1, 4).compose(cycle(3, 5, 6)),
      cycle(1, 4, 3, 6, 5),
      cycle(1, 4, 2, 3).compose(cycle(5, 6)),
      cycle(1, 4).compose(cycle(2, 3)),
      cycle(1, 4, 6, 2, 3, 5),
      cycle(1, 4, 5, 2, 3, 6),
      cycle(1, 4, 6, 3).compose(cycle(2, 5)),
      cycle(1, 4, 3, 2, 5, 6),
      cycle(1, 4, 2, 5),
      cycle(1, 4).compose(cycle(2, 5, 3, 6)),
      cycle(1, 4, 3).compose(cycle(2, 6)),
      cycle(1, 4, 5).compose(cycle(2, 6, 3)),
      cycle(1, 4).compose(cycle(2, 6, 5)),
      cycle(1, 4, 2, 6).compose(cycle(3, 5)),
      cycle(1, 5, 6, 3, 2),
      cycle(1, 5, 2).compose(cycle(4, 6)),
      cycle(1, 5, 3, 4, 2),
      cycle(1, 5, 4, 3, 6, 2),
      cycle(1, 5, 6, 4, 3),
      cycle(1, 5, 4),
      cycle(1, 5).compose(cycle(3, 4, 6)),
      cycle(1, 5, 3, 6),
      cycle(1, 5, 2, 3),
      cycle(1, 5, 4, 6).compose(cycle(2, 3)),
      cycle(1, 5, 6, 2, 3, 4),
      cycle(1, 5).compose(cycle(2, 3, 6, 4)),
      cycle(1, 5, 3).compose(cycle(2, 4, 6)),
      cycle(1, 5).compose(cycle(2, 4, 3)),
      cycle(1, 5, 6).compose(cycle(2, 4)),
      cycle(1, 5, 2, 4).compose(cycle(3, 6)),
      cycle(1, 5, 4, 2, 6, 3),
      cycle(1, 5, 3, 2, 6, 4),
      cycle(1, 5).compose(cycle(2, 6)),
      cycle(1, 5, 2, 6).compose(cycle(3, 4)),
      cycle(1, 6, 4, 3, 2),
      cycle(1, 6, 5, 4, 2),
      cycle(1, 6, 3, 4, 5, 2),
      cycle(1, 6, 2).compose(cycle(3, 5)),
      cycle(1, 6, 3),
      cycle(1, 6, 4, 5),
      cycle(1, 6, 5, 3, 4),
      cycle(1, 6).compose(cycle(3, 5, 4)),
      cycle(1, 6, 2, 3).compose(cycle(4, 5)),
      cycle(1, 6, 5).compose(cycle(2, 3)),
      cycle(1, 6).compose(cycle(2, 3, 4)),
      cycle(1, 6, 4).compose(cycle(2, 3, 5)),
      cycle(1, 6, 5, 2, 4, 3),
      cycle(1, 6).compose(cycle(2, 4, 5, 3)),
      cycle(1, 6, 2, 4),
      cycle(1, 6, 3, 5).compose(cycle(2, 4)),
      cycle(1, 6, 4, 2, 5, 3),
      cycle(1, 6, 3, 2, 5, 4),
      cycle(1, 6).compose(cycle(2, 5)),
      cycle(1, 6, 2, 5).compose(cycle(3, 4))
  )),


  COSET3(Arrays.asList(cycle(4, 6),
      cycle(3, 4, 5),
      cycle(3, 5, 6),
      cycle(3, 6, 5, 4),
      cycle(2, 3),
      cycle(2, 3, 4).compose(cycle(5, 6)),
      cycle(2, 3, 5, 4, 6),
      cycle(2, 3, 6, 4, 5),
      cycle(2, 4, 6, 5, 3),
      cycle(2, 4, 5, 6),
      cycle(2, 4, 3, 5),
      cycle(2, 4).compose(cycle(3, 6)),
      cycle(2, 5, 6, 4, 3),
      cycle(2, 5, 4),
      cycle(2, 5).compose(cycle(3, 4, 6)),
      cycle(2, 5, 3, 6),
      cycle(2, 6, 3).compose(cycle(4, 5)),
      cycle(2, 6, 5),
      cycle(2, 6).compose(cycle(3, 4)),
      cycle(2, 6, 4).compose(cycle(3, 5)),
      cycle(1, 2).compose(cycle(4, 6, 5)),
      cycle(1, 2).compose(cycle(3, 4, 5, 6)),
      cycle(1, 2).compose(cycle(3, 5)),
      cycle(1, 2).compose(cycle(3, 6, 4)),
      cycle(1, 2, 3).compose(cycle(4, 5)),
      cycle(1, 2, 3, 4, 6),
      cycle(1, 2, 3, 5, 6, 4),
      cycle(1, 2, 3, 6, 5),
      cycle(1, 2, 4, 3).compose(cycle(5, 6)),
      cycle(1, 2, 4),
      cycle(1, 2, 4, 6, 3, 5),
      cycle(1, 2, 4, 5, 3, 6),
      cycle(1, 2, 5, 3).compose(cycle(4, 6)),
      cycle(1, 2, 5, 6),
      cycle(1, 2, 5).compose(cycle(3, 4)),
      cycle(1, 2, 5, 4).compose(cycle(3, 6)),
      cycle(1, 2, 6, 3),
      cycle(1, 2, 6, 4, 5),
      cycle(1, 2, 6, 5, 3, 4),
      cycle(1, 2, 6).compose(cycle(3, 5, 4)),
      cycle(1, 3, 2).compose(cycle(5, 6)),
      cycle(1, 3, 4, 2),
      cycle(1, 3, 5, 2).compose(cycle(4, 6)),
      cycle(1, 3, 6, 2).compose(cycle(4, 5)),
      cycle(1, 3).compose(cycle(4, 5, 6)),
      cycle(1, 3, 4, 6, 5),
      cycle(1, 3, 5, 4),
      cycle(1, 3, 6),
      cycle(1, 3).compose(cycle(2, 4, 6)),
      cycle(1, 3, 2, 4, 5),
      cycle(1, 3, 5, 6).compose(cycle(2, 4)),
      cycle(1, 3, 6, 5, 2, 4),
      cycle(1, 3).compose(cycle(2, 5)),
      cycle(1, 3, 2, 5, 4, 6),
      cycle(1, 3, 4).compose(cycle(2, 5, 6)),
      cycle(1, 3, 6, 4, 2, 5),
      cycle(1, 3).compose(cycle(2, 6, 5, 4)),
      cycle(1, 3, 2, 6, 4),
      cycle(1, 3, 4, 5, 2, 6),
      cycle(1, 3, 5).compose(cycle(2, 6)),
      cycle(1, 4, 6, 3, 2),
      cycle(1, 4, 5, 2),
      cycle(1, 4, 3, 5, 6, 2),
      cycle(1, 4, 2).compose(cycle(3, 6, 5)),
      cycle(1, 4, 3),
      cycle(1, 4).compose(cycle(5, 6)),
      cycle(1, 4, 6).compose(cycle(3, 5)),
      cycle(1, 4, 5).compose(cycle(3, 6)),
      cycle(1, 4, 6, 5, 2, 3),
      cycle(1, 4, 5, 6).compose(cycle(2, 3)),
      cycle(1, 4, 2, 3, 5),
      cycle(1, 4).compose(cycle(2, 3, 6)),
      cycle(1, 4, 2, 5, 6, 3),
      cycle(1, 4).compose(cycle(2, 5, 3)),
      cycle(1, 4, 6, 2, 5),
      cycle(1, 4, 3, 6).compose(cycle(2, 5)),
      cycle(1, 4, 5, 3).compose(cycle(2, 6)),
      cycle(1, 4, 3, 2, 6, 5),
      cycle(1, 4, 2, 6),
      cycle(1, 4).compose(cycle(2, 6, 3, 5)),
      cycle(1, 5, 4, 3, 2),
      cycle(1, 5, 6, 4, 2),
      cycle(1, 5, 3, 4, 6, 2),
      cycle(1, 5, 2).compose(cycle(3, 6)),
      cycle(1, 5, 4, 6, 3),
      cycle(1, 5),
      cycle(1, 5, 6).compose(cycle(3, 4)),
      cycle(1, 5, 3, 6, 4),
      cycle(1, 5, 6, 2, 3),
      cycle(1, 5).compose(cycle(2, 3)).compose(cycle(4, 6)),
      cycle(1, 5, 2, 3, 4),
      cycle(1, 5, 4, 2, 3, 6),
      cycle(1, 5, 3).compose(cycle(2, 4)),
      cycle(1, 5, 6, 3, 2, 4),
      cycle(1, 5, 2, 4, 6),
      cycle(1, 5).compose(cycle(2, 4, 3, 6)),
      cycle(1, 5, 2, 6, 4, 3),
      cycle(1, 5, 3, 2, 6),
      cycle(1, 5, 4).compose(cycle(2, 6)),
      cycle(1, 5).compose(cycle(2, 6, 3, 4)),
      cycle(1, 6, 4, 5, 3, 2),
      cycle(1, 6, 2),
      cycle(1, 6, 5, 2).compose(cycle(3, 4)),
      cycle(1, 6, 3, 5, 4, 2),
      cycle(1, 6, 5, 3),
      cycle(1, 6).compose(cycle(4, 5)),
      cycle(1, 6, 3, 4),
      cycle(1, 6, 4, 3, 5),
      cycle(1, 6, 4, 2, 3),
      cycle(1, 6, 5, 4).compose(cycle(2, 3)),
      cycle(1, 6, 2, 3, 4, 5),
      cycle(1, 6).compose(cycle(2, 3, 5)),
      cycle(1, 6, 3).compose(cycle(2, 4, 5)),
      cycle(1, 6).compose(cycle(2, 4, 3)),
      cycle(1, 6, 5).compose(cycle(2, 4)),
      cycle(1, 6, 2, 4).compose(cycle(3, 5)),
      cycle(1, 6, 2, 5, 4, 3),
      cycle(1, 6, 3, 2, 5),
      cycle(1, 6, 4).compose(cycle(2, 5)),
      cycle(1, 6).compose(cycle(2, 5, 3, 4))
  )),


  COSET4(Arrays.asList(cycle(4, 5, 6),
      cycle(3, 4, 6, 5),
      cycle(3, 5, 4),
      cycle(3, 6),
      cycle(2, 3).compose(cycle(5, 6)),
      cycle(2, 3, 4),
      cycle(2, 3, 5).compose(cycle(4, 6)),
      cycle(2, 3, 6).compose(cycle(4, 5)),
      cycle(2, 4, 5, 3),
      cycle(2, 4, 6),
      cycle(2, 4).compose(cycle(3, 5, 6)),
      cycle(2, 4, 3, 6, 5),
      cycle(2, 5, 4, 6, 3),
      cycle(2, 5),
      cycle(2, 5, 6).compose(cycle(3, 4)),
      cycle(2, 5, 3, 6, 4),
      cycle(2, 6, 4, 3),
      cycle(2, 6, 5, 4),
      cycle(2, 6, 3, 4, 5),
      cycle(2, 6).compose(cycle(3, 5)),
      cycle(1, 2).compose(cycle(4, 5)),
      cycle(1, 2).compose(cycle(3, 4, 6)),
      cycle(1, 2).compose(cycle(3, 5, 6, 4)),
      cycle(1, 2).compose(cycle(3, 6, 5)),
      cycle(1, 2, 3).compose(cycle(4, 6, 5)),
      cycle(1, 2, 3, 4, 5, 6),
      cycle(1, 2, 3, 5),
      cycle(1, 2, 3, 6, 4),
      cycle(1, 2, 4, 3),
      cycle(1, 2, 4).compose(cycle(5, 6)),
      cycle(1, 2, 4, 6).compose(cycle(3, 5)),
      cycle(1, 2, 4, 5).compose(cycle(3, 6)),
      cycle(1, 2, 5, 6, 3),
      cycle(1, 2, 5).compose(cycle(4, 6)),
      cycle(1, 2, 5, 3, 4),
      cycle(1, 2, 5, 4, 3, 6),
      cycle(1, 2, 6, 4, 5, 3),
      cycle(1, 2, 6),
      cycle(1, 2, 6, 5).compose(cycle(3, 4)),
      cycle(1, 2, 6, 3, 5, 4),
      cycle(1, 3, 2),
      cycle(1, 3, 4, 2).compose(cycle(5, 6)),
      cycle(1, 3, 5, 4, 6, 2),
      cycle(1, 3, 6, 4, 5, 2),
      cycle(1, 3).compose(cycle(4, 6)),
      cycle(1, 3, 4, 5),
      cycle(1, 3, 5, 6),
      cycle(1, 3, 6, 5, 4),
      cycle(1, 3).compose(cycle(2, 4, 5, 6)),
      cycle(1, 3, 2, 4, 6, 5),
      cycle(1, 3, 5, 2, 4),
      cycle(1, 3, 6).compose(cycle(2, 4)),
      cycle(1, 3).compose(cycle(2, 5, 4)),
      cycle(1, 3, 2, 5, 6, 4),
      cycle(1, 3, 4, 6).compose(cycle(2, 5)),
      cycle(1, 3, 6, 2, 5),
      cycle(1, 3).compose(cycle(2, 6, 5)),
      cycle(1, 3, 2, 6).compose(cycle(4, 5)),
      cycle(1, 3, 4).compose(cycle(2, 6)),
      cycle(1, 3, 5).compose(cycle(2, 6, 4)),
      cycle(1, 4, 5, 6, 3, 2),
      cycle(1, 4, 6, 5, 2),
      cycle(1, 4, 2).compose(cycle(3, 5)),
      cycle(1, 4, 3, 6, 2),
      cycle(1, 4, 3).compose(cycle(5, 6)),
      cycle(1, 4),
      cycle(1, 4, 6, 3, 5),
      cycle(1, 4, 5, 3, 6),
      cycle(1, 4, 5, 2, 3),
      cycle(1, 4, 6).compose(cycle(2, 3)),
      cycle(1, 4).compose(cycle(2, 3, 5, 6)),
      cycle(1, 4, 2, 3, 6, 5),
      cycle(1, 4, 6, 2, 5, 3),
      cycle(1, 4, 3, 2, 5),
      cycle(1, 4, 2, 5, 6),
      cycle(1, 4).compose(cycle(2, 5)).compose(cycle(3, 6)),
      cycle(1, 4, 2, 6, 3),
      cycle(1, 4).compose(cycle(2, 6, 5, 3)),
      cycle(1, 4, 5).compose(cycle(2, 6)),
      cycle(1, 4, 3, 5, 2, 6),
      cycle(1, 5, 3, 2).compose(cycle(4, 6)),
      cycle(1, 5, 6, 2),
      cycle(1, 5, 2).compose(cycle(3, 4)),
      cycle(1, 5, 4, 2).compose(cycle(3, 6)),
      cycle(1, 5, 3),
      cycle(1, 5, 4, 6),
      cycle(1, 5, 6, 3, 4),
      cycle(1, 5).compose(cycle(3, 6, 4)),
      cycle(1, 5, 6, 4, 2, 3),
      cycle(1, 5, 4).compose(cycle(2, 3)),
      cycle(1, 5).compose(cycle(2, 3, 4, 6)),
      cycle(1, 5, 2, 3, 6),
      cycle(1, 5, 2, 4, 6, 3),
      cycle(1, 5, 6).compose(cycle(2, 4, 3)),
      cycle(1, 5).compose(cycle(2, 4)),
      cycle(1, 5, 3, 6, 2, 4),
      cycle(1, 5, 4, 3).compose(cycle(2, 6)),
      cycle(1, 5).compose(cycle(2, 6, 3)),
      cycle(1, 5, 2, 6, 4),
      cycle(1, 5, 3, 4, 2, 6),
      cycle(1, 6, 5, 4, 3, 2),
      cycle(1, 6, 4, 2),
      cycle(1, 6, 2).compose(cycle(3, 4, 5)),
      cycle(1, 6, 3, 5, 2),
      cycle(1, 6, 3).compose(cycle(4, 5)),
      cycle(1, 6, 5),
      cycle(1, 6).compose(cycle(3, 4)),
      cycle(1, 6, 4).compose(cycle(3, 5)),
      cycle(1, 6, 2, 3),
      cycle(1, 6, 4, 5).compose(cycle(2, 3)),
      cycle(1, 6, 5, 2, 3, 4),
      cycle(1, 6).compose(cycle(2, 3, 5, 4)),
      cycle(1, 6, 5, 3).compose(cycle(2, 4)),
      cycle(1, 6, 3, 2, 4),
      cycle(1, 6).compose(cycle(2, 4, 5)),
      cycle(1, 6, 2, 4, 3, 5),
      cycle(1, 6, 4, 3).compose(cycle(2, 5)),
      cycle(1, 6).compose(cycle(2, 5, 3)),
      cycle(1, 6, 2, 5, 4),
      cycle(1, 6, 3, 4, 2, 5)
  )),


  COSET5(Arrays.asList(cycle(4, 6, 5),
      cycle(3, 4, 5, 6),
      cycle(3, 5),
      cycle(3, 6, 4),
      cycle(2, 3).compose(cycle(4, 5)),
      cycle(2, 3, 4, 6),
      cycle(2, 3, 5, 6, 4),
      cycle(2, 3, 6, 5),
      cycle(2, 4, 3).compose(cycle(5, 6)),
      cycle(2, 4),
      cycle(2, 4, 6, 3, 5),
      cycle(2, 4, 5, 3, 6),
      cycle(2, 5, 3).compose(cycle(4, 6)),
      cycle(2, 5, 6),
      cycle(2, 5).compose(cycle(3, 4)),
      cycle(2, 5, 4).compose(cycle(3, 6)),
      cycle(2, 6, 3),
      cycle(2, 6, 4, 5),
      cycle(2, 6, 5, 3, 4),
      cycle(2, 6).compose(cycle(3, 5, 4)),
      cycle(1, 2).compose(cycle(4, 6)),
      cycle(1, 2).compose(cycle(3, 4, 5)),
      cycle(1, 2).compose(cycle(3, 5, 6)),
      cycle(1, 2).compose(cycle(3, 6, 5, 4)),
      cycle(1, 2, 3),
      cycle(1, 2, 3, 4).compose(cycle(5, 6)),
      cycle(1, 2, 3, 5, 4, 6),
      cycle(1, 2, 3, 6, 4, 5),
      cycle(1, 2, 4, 6, 5, 3),
      cycle(1, 2, 4, 5, 6),
      cycle(1, 2, 4, 3, 5),
      cycle(1, 2, 4).compose(cycle(3, 6)),
      cycle(1, 2, 5, 6, 4, 3),
      cycle(1, 2, 5, 4),
      cycle(1, 2, 5).compose(cycle(3, 4, 6)),
      cycle(1, 2, 5, 3, 6),
      cycle(1, 2, 6, 3).compose(cycle(4, 5)),
      cycle(1, 2, 6, 5),
      cycle(1, 2, 6).compose(cycle(3, 4)),
      cycle(1, 2, 6, 4).compose(cycle(3, 5)),
      cycle(1, 3, 2).compose(cycle(4, 5, 6)),
      cycle(1, 3, 4, 6, 5, 2),
      cycle(1, 3, 5, 4, 2),
      cycle(1, 3, 6, 2),
      cycle(1, 3).compose(cycle(5, 6)),
      cycle(1, 3, 4),
      cycle(1, 3, 5).compose(cycle(4, 6)),
      cycle(1, 3, 6).compose(cycle(4, 5)),
      cycle(1, 3).compose(cycle(2, 4, 5)),
      cycle(1, 3, 2, 4, 6),
      cycle(1, 3, 5, 6, 2, 4),
      cycle(1, 3, 6, 5).compose(cycle(2, 4)),
      cycle(1, 3).compose(cycle(2, 5, 4, 6)),
      cycle(1, 3, 2, 5),
      cycle(1, 3, 4, 2, 5, 6),
      cycle(1, 3, 6, 4).compose(cycle(2, 5)),
      cycle(1, 3).compose(cycle(2, 6, 4)),
      cycle(1, 3, 2, 6, 5, 4),
      cycle(1, 3, 4, 5).compose(cycle(2, 6)),
      cycle(1, 3, 5, 2, 6),
      cycle(1, 4, 3, 2),
      cycle(1, 4, 2).compose(cycle(5, 6)),
      cycle(1, 4, 6, 2).compose(cycle(3, 5)),
      cycle(1, 4, 5, 2).compose(cycle(3, 6)),
      cycle(1, 4, 6, 3),
      cycle(1, 4, 5),
      cycle(1, 4, 3, 5, 6),
      cycle(1, 4).compose(cycle(3, 6, 5)),
      cycle(1, 4, 5, 6, 2, 3),
      cycle(1, 4, 6, 5).compose(cycle(2, 3)),
      cycle(1, 4).compose(cycle(2, 3, 5)),
      cycle(1, 4, 2, 3, 6),
      cycle(1, 4, 2, 5, 3),
      cycle(1, 4).compose(cycle(2, 5, 6, 3)),
      cycle(1, 4, 6).compose(cycle(2, 5)),
      cycle(1, 4, 3, 6, 2, 5),
      cycle(1, 4, 3).compose(cycle(2, 6, 5)),
      cycle(1, 4, 5, 3, 2, 6),
      cycle(1, 4).compose(cycle(2, 6)),
      cycle(1, 4, 2, 6, 3, 5),
      cycle(1, 5, 4, 6, 3, 2),
      cycle(1, 5, 2),
      cycle(1, 5, 6, 2).compose(cycle(3, 4)),
      cycle(1, 5, 3, 6, 4, 2),
      cycle(1, 5, 4, 3),
      cycle(1, 5, 6, 4),
      cycle(1, 5, 3, 4, 6),
      cycle(1, 5).compose(cycle(3, 6)),
      cycle(1, 5, 2, 3).compose(cycle(4, 6)),
      cycle(1, 5, 6).compose(cycle(2, 3)),
      cycle(1, 5).compose(cycle(2, 3, 4)),
      cycle(1, 5, 4).compose(cycle(2, 3, 6)),
      cycle(1, 5, 6, 3).compose(cycle(2, 4)),
      cycle(1, 5, 3, 2, 4),
      cycle(1, 5).compose(cycle(2, 4, 6)),
      cycle(1, 5, 2, 4, 3, 6),
      cycle(1, 5, 3).compose(cycle(2, 6)),
      cycle(1, 5).compose(cycle(2, 6, 4, 3)),
      cycle(1, 5, 4, 2, 6),
      cycle(1, 5, 2, 6, 3, 4),
      cycle(1, 6, 5, 3, 2),
      cycle(1, 6, 2).compose(cycle(4, 5)),
      cycle(1, 6, 3, 4, 2),
      cycle(1, 6, 4, 3, 5, 2),
      cycle(1, 6, 4, 5, 3),
      cycle(1, 6),
      cycle(1, 6, 5).compose(cycle(3, 4)),
      cycle(1, 6, 3, 5, 4),
      cycle(1, 6, 5, 4, 2, 3),
      cycle(1, 6, 4).compose(cycle(2, 3)),
      cycle(1, 6).compose(cycle(2, 3, 4, 5)),
      cycle(1, 6, 2, 3, 5),
      cycle(1, 6, 2, 4, 3),
      cycle(1, 6, 3, 2, 4, 5),
      cycle(1, 6, 5, 2, 4),
      cycle(1, 6).compose(cycle(2, 4)).compose(cycle(3, 5)),
      cycle(1, 6, 3).compose(cycle(2, 5)),
      cycle(1, 6).compose(cycle(2, 5, 4, 3)),
      cycle(1, 6, 4, 2, 5),
      cycle(1, 6, 2, 5, 3, 4)
  )),


  COSET6(Arrays.asList(cycle(4, 5),
      cycle(3, 4, 6),
      cycle(3, 5, 6, 4),
      cycle(3, 6, 5),
      cycle(2, 3).compose(cycle(4, 6, 5)),
      cycle(2, 3, 4, 5, 6),
      cycle(2, 3, 5),
      cycle(2, 3, 6, 4),
      cycle(2, 4, 3),
      cycle(2, 4).compose(cycle(5, 6)),
      cycle(2, 4, 6).compose(cycle(3, 5)),
      cycle(2, 4, 5).compose(cycle(3, 6)),
      cycle(2, 5, 6, 3),
      cycle(2, 5).compose(cycle(4, 6)),
      cycle(2, 5, 3, 4),
      cycle(2, 5, 4, 3, 6),
      cycle(2, 6, 4, 5, 3),
      cycle(2, 6),
      cycle(2, 6, 5).compose(cycle(3, 4)),
      cycle(2, 6, 3, 5, 4),
      cycle(1, 2).compose(cycle(4, 5, 6)),
      cycle(1, 2).compose(cycle(3, 4, 6, 5)),
      cycle(1, 2).compose(cycle(3, 5, 4)),
      cycle(1, 2).compose(cycle(3, 6)),
      cycle(1, 2, 3).compose(cycle(5, 6)),
      cycle(1, 2, 3, 4),
      cycle(1, 2, 3, 5).compose(cycle(4, 6)),
      cycle(1, 2, 3, 6).compose(cycle(4, 5)),
      cycle(1, 2, 4, 5, 3),
      cycle(1, 2, 4, 6),
      cycle(1, 2, 4).compose(cycle(3, 5, 6)),
      cycle(1, 2, 4, 3, 6, 5),
      cycle(1, 2, 5, 4, 6, 3),
      cycle(1, 2, 5),
      cycle(1, 2, 5, 6).compose(cycle(3, 4)),
      cycle(1, 2, 5, 3, 6, 4),
      cycle(1, 2, 6, 4, 3),
      cycle(1, 2, 6, 5, 4),
      cycle(1, 2, 6, 3, 4, 5),
      cycle(1, 2, 6).compose(cycle(3, 5)),
      cycle(1, 3, 2).compose(cycle(4, 6)),
      cycle(1, 3, 4, 5, 2),
      cycle(1, 3, 5, 6, 2),
      cycle(1, 3, 6, 5, 4, 2),
      cycle(1, 3),
      cycle(1, 3, 4).compose(cycle(5, 6)),
      cycle(1, 3, 5, 4, 6),
      cycle(1, 3, 6, 4, 5),
      cycle(1, 3).compose(cycle(2, 4, 6, 5)),
      cycle(1, 3, 2, 4, 5, 6),
      cycle(1, 3, 5).compose(cycle(2, 4)),
      cycle(1, 3, 6, 2, 4),
      cycle(1, 3).compose(cycle(2, 5, 6, 4)),
      cycle(1, 3, 2, 5, 4),
      cycle(1, 3, 4, 6, 2, 5),
      cycle(1, 3, 6).compose(cycle(2, 5)),
      cycle(1, 3).compose(cycle(2, 6)).compose(cycle(4, 5)),
      cycle(1, 3, 2, 6, 5),
      cycle(1, 3, 4, 2, 6),
      cycle(1, 3, 5, 2, 6, 4),
      cycle(1, 4, 3, 2).compose(cycle(5, 6)),
      cycle(1, 4, 2),
      cycle(1, 4, 6, 3, 5, 2),
      cycle(1, 4, 5, 3, 6, 2),
      cycle(1, 4, 5, 6, 3),
      cycle(1, 4, 6, 5),
      cycle(1, 4).compose(cycle(3, 5)),
      cycle(1, 4, 3, 6),
      cycle(1, 4, 6, 2, 3),
      cycle(1, 4, 5).compose(cycle(2, 3)),
      cycle(1, 4, 2, 3, 5, 6),
      cycle(1, 4).compose(cycle(2, 3, 6, 5)),
      cycle(1, 4, 3).compose(cycle(2, 5)),
      cycle(1, 4, 6).compose(cycle(2, 5, 3)),
      cycle(1, 4).compose(cycle(2, 5, 6)),
      cycle(1, 4, 2, 5).compose(cycle(3, 6)),
      cycle(1, 4, 2, 6, 5, 3),
      cycle(1, 4).compose(cycle(2, 6, 3)),
      cycle(1, 4, 5, 2, 6),
      cycle(1, 4, 3, 5).compose(cycle(2, 6)),
      cycle(1, 5, 3, 2),
      cycle(1, 5, 4, 6, 2),
      cycle(1, 5, 6, 3, 4, 2),
      cycle(1, 5, 2).compose(cycle(3, 6, 4)),
      cycle(1, 5, 3).compose(cycle(4, 6)),
      cycle(1, 5, 6),
      cycle(1, 5).compose(cycle(3, 4)),
      cycle(1, 5, 4).compose(cycle(3, 6)),
      cycle(1, 5, 4, 2, 3),
      cycle(1, 5, 6, 4).compose(cycle(2, 3)),
      cycle(1, 5, 2, 3, 4, 6),
      cycle(1, 5).compose(cycle(2, 3, 6)),
      cycle(1, 5, 6, 2, 4, 3),
      cycle(1, 5).compose(cycle(2, 4, 6, 3)),
      cycle(1, 5, 2, 4),
      cycle(1, 5, 3, 6).compose(cycle(2, 4)),
      cycle(1, 5, 2, 6, 3),
      cycle(1, 5, 4, 3, 2, 6),
      cycle(1, 5).compose(cycle(2, 6, 4)),
      cycle(1, 5, 3, 4).compose(cycle(2, 6)),
      cycle(1, 6, 3, 2).compose(cycle(4, 5)),
      cycle(1, 6, 5, 2),
      cycle(1, 6, 2).compose(cycle(3, 4)),
      cycle(1, 6, 4, 2).compose(cycle(3, 5)),
      cycle(1, 6, 5, 4, 3),
      cycle(1, 6, 4),
      cycle(1, 6).compose(cycle(3, 4, 5)),
      cycle(1, 6, 3, 5),
      cycle(1, 6, 4, 5, 2, 3),
      cycle(1, 6).compose(cycle(2, 3)),
      cycle(1, 6, 5).compose(cycle(2, 3, 4)),
      cycle(1, 6, 2, 3, 5, 4),
      cycle(1, 6, 3).compose(cycle(2, 4)),
      cycle(1, 6, 5, 3, 2, 4),
      cycle(1, 6, 2, 4, 5),
      cycle(1, 6).compose(cycle(2, 4, 3, 5)),
      cycle(1, 6, 2, 5, 3),
      cycle(1, 6, 4, 3, 2, 5),
      cycle(1, 6).compose(cycle(2, 5, 4)),
      cycle(1, 6, 3, 4).compose(cycle(2, 5))));

  private final Set<Permutation> set;

  Coset(List<Permutation> set) {
    this.set = new TreeSet<>(PERMUTATION_COMPARATOR);
    this.set.addAll(set);
  }

  Set<Permutation> getSet() {
    return set;
  }
}
